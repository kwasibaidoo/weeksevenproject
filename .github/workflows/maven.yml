name: CI/CD Pipeline for Blue-Green Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  APP_ENVIRONMENT: weeksevenlab
  AWS_REGION: eu-west-1  # Your ECS and CodeDeploy region
  ECR_REGION: us-east-1  # ECR Public region
  ECS_CLUSTER: weeksevenlab-Cluster
  ECS_SERVICE: weeksevenlab-service
  ECS_TASK_FAMILY: weeksevenlab-task
  CODEDEPLOY_APPLICATION: weeksevenlab-deploy-app
  CODEDEPLOY_DEPLOYMENT_GROUP: weeksevenlab-deploy-group

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: Configure AWS credentials for ECR (us-east-1)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.ECR_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public
        
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: public.ecr.aws/o0m1t6s5
        ECR_REPOSITORY: todo-app-dynamodb
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    # - name: Configure AWS credentials for ECS/CodeDeploy (eu-west-1)
    #   uses: aws-actions/configure-aws-credentials@v4
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: eu-west-1

    # - name: Set ECR Region environment
    #   run: |
    #     echo "AWS_DEFAULT_REGION=eu-west-1" >> $GITHUB_ENV

    # - name: Generate task definition JSON
    #   run: |
    #     cat <<EOF > task-definition.json
    #     {
    #       "family": "${{ env.ECS_TASK_FAMILY }}",
    #       "cpu": "256",
    #       "memory": "512",
    #       "networkMode": "awsvpc",
    #       "requiresCompatibilities": ["FARGATE"],
    #       "taskRoleArn": "arn:aws:iam::888577022995:role/week6lab-ECSTaskExecutionRole-skwsNUKQKO4w",
    #       "executionRoleArn": "arn:aws:iam::888577022995:role/week6lab-ECSTaskExecutionRole-skwsNUKQKO4w",
    #       "containerDefinitions": [
    #         {
    #           "name": "${{ env.APP_ENVIRONMENT }}-container",
    #           "image": "${{ env.image }}",
    #           "essential": true,
    #           "portMappings": [
    #             {
    #               "containerPort": 5000,
    #               "hostPort": 5000,
    #               "protocol": "tcp"
    #             }
    #           ],
    #           "logConfiguration": {
    #             "logDriver": "awslogs",
    #             "options": {
    #               "awslogs-group": "/ecs/${{ env.APP_ENVIRONMENT }}",
    #               "awslogs-region": "eu-west-1",
    #               "awslogs-stream-prefix": "ecs"
    #             }
    #           },
    #           "environment": [
    #             {"name": "S3_BUCKET_NAME", "value": "${{ env.APP_ENVIRONMENT }}-images-${{ secrets.AWS_ACCOUNT_ID }}"},
    #             {"name": "AWS_REGION", "value": "eu-west-1"},
    #             {"name": "SPRING_ACTIVE_PROFILE", "value": "prod"}
    #           ],
    #           "healthCheck": {
    #             "command": ["CMD-SHELL", "curl -f http://localhost:5000/ || exit 1"],
    #             "interval": 30,
    #             "timeout": 5,
    #             "retries": 3,
    #             "startPeriod": 60
    #           }
    #         }
    #       ]
    #     }
    #     EOF

    # - name: Register new task definition
    #   run: |
    #     TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --region eu-west-1 --query 'taskDefinition.taskDefinitionArn' --output text)
    #     echo "Task Definition ARN: $TASK_DEFINITION_ARN"
    #     echo "task_definition_arn=$TASK_DEFINITION_ARN" >> $GITHUB_ENV

    # - name: Generate appspec.json for CodeDeploy
    #   run: |
    #     cat <<EOF > appspec.json
    #     {
    #       "version": 0.0,
    #       "Resources": [
    #         {
    #           "TargetService": {
    #             "Type": "AWS::ECS::Service",
    #             "Properties": {
    #               "TaskDefinition": "${{ env.task_definition_arn }}",
    #               "LoadBalancerInfo": {
    #                 "ContainerName": "${{ env.APP_ENVIRONMENT }}-container",
    #                 "ContainerPort": 5000
    #               }
    #             }
    #           }
    #         }
    #       ]
    #     }
    #     EOF

    # - name: Install jq
    #   run: sudo apt-get install -y jq

    # - name: Trigger CodeDeploy deployment
    #   run: |
    #     # Read appspec.json and escape the content properly
    #     APPSPEC_CONTENT=$(cat appspec.json | jq -c -r @json)
        
    #     # Escape any inner quotes so that it's valid JSON for AWS
    #     ESCAPED_APPSPEC_CONTENT=$(echo "$APPSPEC_CONTENT" | sed 's/"/\\"/g')
        
    #     # Create a deployment with the appspec content as a string
    #     DEPLOYMENT_ID=$(aws deploy create-deployment \
    #       --application-name "${{ env.CODEDEPLOY_APPLICATION }}" \
    #       --deployment-group-name "${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }}" \
    #       --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
    #       --description "Deployment triggered by GitHub Actions" \
    #       --revision "{\"revisionType\":\"AppSpecContent\",\"appSpecContent\":{\"content\":\"$ESCAPED_APPSPEC_CONTENT\"}}" \
    #       --region eu-west-1 \
    #       --query 'deploymentId' --output text)
        
    #     echo "Deployment ID: $DEPLOYMENT_ID"
        
    #     # Wait for the deployment to complete
    #     aws deploy wait deployment-successful \
    #       --deployment-id "$DEPLOYMENT_ID" \
    #       --region eu-west-1
